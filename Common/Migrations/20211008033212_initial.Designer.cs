// <auto-generated />
using System;
using Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Common.Migrations
{
    [DbContext(typeof(ProjectDPContext))]
    [Migration("20211008033212_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Common.Model.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sorting")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PlayStaion 4",
                            Sorting = 0,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Name = "Xbox One S",
                            Sorting = 0,
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            Name = "Nintendo Switch",
                            Sorting = 0,
                            Status = true
                        });
                });

            modelBuilder.Entity("Common.Model.OrderModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductModelId")
                        .HasColumnType("int");

                    b.Property<string>("ShipAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("UserId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("Common.Model.Order_DetailsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("orderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("orderId");

                    b.ToTable("order_Details");
                });

            modelBuilder.Entity("Common.Model.ProductGalleryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("gallery");
                });

            modelBuilder.Entity("Common.Model.ProductModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoreImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PriceOld")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 702, DateTimeKind.Local).AddTicks(9622),
                            Description = "Đẹp",
                            Image = "/img/sanpham/Máy PS4 Pro The Last Of Us 2 Limited Edition.jpg",
                            Name = "PS4 Pro The Last Of Us 2 Limited Edition",
                            Price = 299,
                            PriceOld = 0,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 706, DateTimeKind.Local).AddTicks(2527),
                            Description = "Đẹp",
                            Image = "/img/sanpham/Máy PS4 Slim 1TB.jpg",
                            Name = "PS4 Slim 1TB",
                            Price = 299,
                            PriceOld = 0,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 706, DateTimeKind.Local).AddTicks(2569),
                            Description = "Đẹp",
                            Image = "/img/sanpham/Máy PS4 Pro The Last Of Us 2 Limited Edition.jpg",
                            Name = "Sony PS4 Slim Days Of Play 2019 Limited Edition",
                            Price = 299,
                            PriceOld = 0,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 706, DateTimeKind.Local).AddTicks(2573),
                            Description = "Đẹp",
                            Image = "/img/sanpham/PS4 Pro 2nd hand.jpg",
                            Name = "PS4 Pro 2nd hand",
                            Price = 299,
                            PriceOld = 0,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 706, DateTimeKind.Local).AddTicks(2575),
                            Description = "Đẹp",
                            Image = "/img/sanpham/PS4 Pro 2nd hand.jpg",
                            Name = "Xbox Series X",
                            Price = 299,
                            PriceOld = 0,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 706, DateTimeKind.Local).AddTicks(2577),
                            Description = "Đẹp",
                            Image = "/img/sanpham/Xbox Series X.jpg",
                            Name = "Xbox Series X",
                            Price = 299,
                            PriceOld = 0,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 706, DateTimeKind.Local).AddTicks(2579),
                            Description = "Đẹp",
                            Image = "/img/sanpham/Xbox Series X.jpg",
                            Name = "Xbox Series X",
                            Price = 299,
                            PriceOld = 0,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 706, DateTimeKind.Local).AddTicks(2581),
                            Description = "Đẹp",
                            Image = "/img/sanpham/Xbox Series S.jpg",
                            Name = "Xbox Series S",
                            Price = 299,
                            PriceOld = 0,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 706, DateTimeKind.Local).AddTicks(2583),
                            Description = "Đẹp",
                            Image = "/img/sanpham/Máy Nintendo Switch V2 Màu Neon.jpg",
                            Name = "Nintendo Switch V2 Màu Neon",
                            Price = 299,
                            PriceOld = 0,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 706, DateTimeKind.Local).AddTicks(2585),
                            Description = "Đẹp",
                            Image = "/img/sanpham/Máy Nintendo Switch Lite - Màu Blue.jpg",
                            Name = "Nintendo Switch Lite - Màu Blue",
                            Price = 299,
                            PriceOld = 0,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 706, DateTimeKind.Local).AddTicks(2587),
                            Description = "Đẹp",
                            Image = "/img/sanpham/Máy Nintendo Switch Fortnite Special Edition.jpg",
                            Name = "Nintendo Switch Fortnite Special Edition",
                            Price = 299,
                            PriceOld = 0,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 706, DateTimeKind.Local).AddTicks(2589),
                            Description = "Đẹp",
                            Image = "/img/sanpham/Máy Nintendo Switch Animal Crossing.jpg",
                            Name = "Nintendo Switch Animal Crossing",
                            Price = 299,
                            PriceOld = 0,
                            Quantity = 50,
                            Status = true
                        });
                });

            modelBuilder.Entity("Common.Model.RolesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            Status = true
                        });
                });

            modelBuilder.Entity("Common.Model.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avarta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RolesId");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "115 Trần Xuân Soạn",
                            Avarta = "user-1.png",
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 706, DateTimeKind.Local).AddTicks(9167),
                            Email = "duyvo049@gmail.com",
                            FullName = "Võ Thành Duy",
                            PassWord = "25f9e794323b453885f5181f1b624d0b",
                            Phone = "0393030574",
                            RolesId = 1,
                            Status = true,
                            UserName = "thanhduy"
                        },
                        new
                        {
                            Id = 2,
                            Address = "115 Trần Xuân Soạn",
                            Avarta = "user-2.png",
                            CreatedOn = new DateTime(2021, 10, 8, 10, 32, 10, 707, DateTimeKind.Local).AddTicks(247),
                            Email = "leloc603@gmail.com",
                            FullName = "Lê Xuân Lộc",
                            PassWord = "25f9e794323b453885f5181f1b624d0b",
                            Phone = "0393030574",
                            RolesId = 2,
                            Status = true,
                            UserName = "leloc"
                        });
                });

            modelBuilder.Entity("Common.Model.OrderModel", b =>
                {
                    b.HasOne("Common.Model.ProductModel", null)
                        .WithMany("orders")
                        .HasForeignKey("ProductModelId");

                    b.HasOne("Common.Model.UserModel", "user")
                        .WithMany("orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Common.Model.Order_DetailsModel", b =>
                {
                    b.HasOne("Common.Model.ProductModel", "product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Model.OrderModel", "order")
                        .WithMany("order_Details")
                        .HasForeignKey("orderId");

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Common.Model.ProductGalleryModel", b =>
                {
                    b.HasOne("Common.Model.ProductModel", "product")
                        .WithMany("productGalleries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("Common.Model.ProductModel", b =>
                {
                    b.HasOne("Common.Model.CategoryModel", "category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("Common.Model.UserModel", b =>
                {
                    b.HasOne("Common.Model.RolesModel", "roles")
                        .WithMany("user")
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roles");
                });

            modelBuilder.Entity("Common.Model.OrderModel", b =>
                {
                    b.Navigation("order_Details");
                });

            modelBuilder.Entity("Common.Model.ProductModel", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("productGalleries");
                });

            modelBuilder.Entity("Common.Model.RolesModel", b =>
                {
                    b.Navigation("user");
                });

            modelBuilder.Entity("Common.Model.UserModel", b =>
                {
                    b.Navigation("orders");
                });
#pragma warning restore 612, 618
        }
    }
}
